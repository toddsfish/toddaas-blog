<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>lambda on toddaas blog</title>
    <link>https://blog.toddaas.com/tags/lambda/</link>
    <description>Recent content in lambda on toddaas blog</description>
    <image>
      <title>toddaas blog</title>
      <url>https://blog.toddaas.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.toddaas.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Aug 2023 05:10:21 +1000</lastBuildDate><atom:link href="https://blog.toddaas.com/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EC2 Autoscaling Warm Pools are very useful for looooooooong bootstrap times - Part 1</title>
      <link>https://blog.toddaas.com/posts/ec2_warm_pools_are_useful_part_1/</link>
      <pubDate>Tue, 08 Aug 2023 05:10:21 +1000</pubDate>
      
      <guid>https://blog.toddaas.com/posts/ec2_warm_pools_are_useful_part_1/</guid>
      <description>So whats the scenario? I came up against conflicting customer requirements of minimising the impact of long application bootstrap times in an autoscaling group partnered along side the requirement of keeping their standard barebones EC2 AMIs interchangable. Essentially the customer did not want to have to deal with the bloat or overheads of maintaining a specific prebaked application AMI alongside an image building solution like EC2 Image Builder or a third party solution like Hashicorp Packer.</description>
      <content:encoded><![CDATA[<h2 id="so-whats-the-scenario">So whats the scenario?</h2>
<p>I came up against conflicting customer requirements of minimising the impact of long application bootstrap times in an autoscaling group partnered along side the requirement of keeping their standard barebones EC2 AMIs interchangable.  Essentially the customer did not want to have to deal with the bloat or overheads of maintaining a specific prebaked application AMI alongside an image building solution like EC2 Image Builder or a third party solution like Hashicorp Packer.  Enter EC2 Autoscaling Warm Pools&hellip;</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Q6TLWqn82J4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="what-are-ec2-autoscaling-warm-pools">What are EC2 Autoscaling Warm Pools?</h2>
<p>EC2 Auto Scaling Warm Pools are a set of pre-intiallised instances that an autoscaling group can maintain to reduce the latency incurred through long boostrap processes.  When a scale out action occurs, the autoscaling group has the ability to draw from the already bootstrapped instance capacity in the Warm Pool rather than launching a fresh new instance incurring bootstrap time.</p>
<h2 id="why-would-you-use-autoscaling-warm-pools">Why would you use Autoscaling Warm Pools?</h2>
<p>Warm pools are super useful when you have a significant amount of bootstrapping time usually attibuted to bespoke configuration requirements of instances launched into an Autoscaling Group.  Additionally using third party AMIs or image building solutions has the overeheads that someone needs to own any bespoke configuration as you build out more diverse AMIs rather just sticking to hardened standard operating environments or golden images.  This becomes even more of a burden when the application team is a third party with an ops team in house.  On top of the obvious benefit of faster scale-out times there is also the added benefit of cost reductions.  When instances enter a warm pool they can be placed into one of three states: Warmed:Stopped, Warmed:Hibernated and Warmed:Running.  So for example by keeping warm pool instances in Warmed:Stopped you can effective minimise costs.  In this state you only pay for the volumes used, elastic ips associated etc. So when you keep your instances stopped or hibernated your saving on the cost of the instances themselves.</p>
<h2 id="how-do-autoscaling-group-lifecycle-hooks-work-when-using-warm-pools">How do Autoscaling Group Lifecycle Hooks work when using Warm Pools</h2>
<p>So I learnt there is abit of a gotcha or side affect by design of Warm Pools, when it comes to using them alongside existing Lifecycle hooks to do bootstrapping of an application on EC2 instance launch.</p>
<p>Lets take a couple of example scenarios&hellip;</p>
<h3 id="scenario-1---a-standard-autocaling-group-with-lifecycle-hook-applied-on-ec2_instance_launching">Scenario 1 - A Standard Autocaling group with Lifecycle Hook applied on EC2_INSTANCE_LAUNCHING:</h3>
<p>In a standard autoscaling group with a Lifecycle Hook applied on EC2_INSTANCE_LAUNCHING scale out. The instance first moves into Pending:Wait state, whereby it will remain in the Pending:Wait state whilst you bootstrap or configure your instance using automation usually in the form of UserData scripts or SSM automations.  As such the final step in your automation following the instance bootstrap will be to call the complete-lifecycle-action API to continue or complete the lifecycle action.  The autoscaling group then continues moving the instance into InService within the autoscaling group ready to serve client requests.</p>
<p><img loading="lazy" src="/img/lifecycle_hooks.png" alt="Standard Lifecycle Hooks"  title="Standard Lifecycle Hooks"  />
</p>
<h3 id="scenario-2---an-autoscaling-group-with-an-existing-lifecycle-hook-applied-on-ec2_instance_launching-alongside-a-warm-pool">Scenario 2 - An Autoscaling group with an existing Lifecycle Hook applied on EC2_INSTANCE_LAUNCHING alongside a Warm Pool</h3>
<p>For an autoscaling group taking advantage of Warmpools alongside an existing EC2_INSTANCE_LAUNCHING Lifecycle Hook. You need to factor in that an instance will enter into a Pending:Wait state twice requiring triggering the complete-lifecycle-action API call <strong>twice</strong>.<br>
<img loading="lazy" src="/img/warm-pools-lifecycle-hooks.png" alt="Lifecycle Hooks with Warm Pools"  title="Lifecycle Hooks with Warm Pools"  />
</p>
<ol>
<li>The first time you must triger complete-lifecycle-action is when the instance is initially started / launched into an ASG.  Usually this is when the instance is bootstrapped with automation UserData scripts or SSM automation whilst in the Warmed:Pending:Wait.  The automation finalises with the first complete-lifecycle-action API call to move the instance into Warm Pool Warmed:Running, Warmed:Stopped or Warmed:Hibernated within the Warm Pool.</li>
<li>Then you must also call complete-lifecycle-action again on any Scale Out of the autoscaling group when the instances move from a Warm pool into the ASG they goes into Pending, Pending Wait.  Then ONLY after the complete-lifecycle-action API has been called the second time does the instance move to Inservice within the autoscaling group.
Is this a bug or just the default behavior when using warm pools?  My guess it has to do with the existing state machine that governs the autoscaling service control plane prior to the launch of this feature.</li>
</ol>
<h2 id="so-whats-the-solution">So whats the solution?</h2>
<h2 id="you-guessed-it-more-automation">You guessed it, more automation!</h2>
<p>The easiest way to workaround this potentially undesirable behavior without having your UserData or your SSM automation needing to call the complete-lifecycle-action twice.  Is to use a Lambda function thats triggered through a Cloudwatch EventBridge Rule when an instances moves out of a Warm Pool.  EC2 Auto Scaling like other AWS services supports publishing its lifecycle events directly to Cloudwatch EventBridge.  As such its possible to create an EventBridge rule that filters for Warm Pool related events for example based on the instances Origin Warm Pool and Destination autoscaling group.  The rule then triggers a Lambda function which calls the complete-lifecycle-action API to continue for the second time without your UserData or SSM automation scripts having to factor this in.  I&rsquo;ll cover this Lifecycle hook automation along with overall Warm Pools in a CDK example as a follow up to this post.</p>
<h2 id="other-useful-references">Other useful references:</h2>
<p>Warm Pools
<a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html">https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html</a>
<a href="https://aws.amazon.com/blogs/compute/scaling-your-applications-faster-with-ec2-auto-scaling-warm-pools/">https://aws.amazon.com/blogs/compute/scaling-your-applications-faster-with-ec2-auto-scaling-warm-pools/</a></p>
<p>EC2 Autoscaling Lifecycle Hooks
<a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks-overview.html">https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks-overview.html</a></p>
<p>Lifecycle Hooks with Warm Pools
<a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/warm-pool-instance-lifecycle.html">https://docs.aws.amazon.com/autoscaling/ec2/userguide/warm-pool-instance-lifecycle.html</a></p>
<p>Warm Pool Patterns for Event Bridge
<a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/warm-pools-eventbridge-events.html">https://docs.aws.amazon.com/autoscaling/ec2/userguide/warm-pools-eventbridge-events.html</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
